# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: step-with-error
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
plugins: 
  - serverless-step-functions

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

#you can add statements to the Lambda function's IAM Role here
iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "s3:ListBucket"
     Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
   - Effect: "Allow"
     Action:
       - "s3:PutObject"
     Resource:
       Fn::Join:
         - ""
         - - "arn:aws:s3:::"
           - "Ref" : "ServerlessDeploymentBucket"
           - "/*"
   - Effect: "Allow"
     Action: 
       - "transcribe:GetTranscriptionJob"
       - "transcribe:StartTranscriptionJob"
     Resource:
         "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  submitTranscribe:
    handler: transcribe.submit
    memorySize: 128   
  checkTranscribeStatus:
    handler: transcribe.check
    memorySize: 128
  processTranscript:
    handler: transcribe.process
    memorySize: 128
stepFunctions:
  stateMachines:
    step-func:
      name: step-func-${self:service}-${opt:stage}
      definition:
        Comment: "Transcribe with error handling"
        StartAt: submitTranscribe
        TimeoutSeconds: 300
        States:
          submitTranscribe:
            InputPath: "$"
            ResultPath: "$.transcribe"
            Type: Task
            Resource:
              Fn::GetAtt: [submitTranscribe, Arn] 
            Retry:
            - ErrorEquals:
              - CustomErrorTranscribeFailed
              IntervalSeconds: 10
              MaxAttempts: 2
              BackoffRate: 1
            - ErrorEquals:
              - States.TaskFailed
              IntervalSeconds: 10
              MaxAttempts: 1
              BackoffRate: 1
            Catch:
            - ErrorEquals:
              - CustomErrorTranscribeFailed
              Next: handledError
            - ErrorEquals:
              - States.TaskFailed
              Next: taskFailed
            Next: checkTranscribe             
          checkTranscribe:
            Type: Task
            InputPath: "$.transcribe"
            ResultPath: "$.transcribeStatus"
            Resource: 
              Fn::GetAtt: [checkTranscribeStatus, Arn] 
            Next: isTranscribeComplete 
          waitForTranscribe:
            Type: Wait
            Seconds: 20
            Next: checkTranscribe   
          isTranscribeComplete:
            Type: Choice
            Choices:
              - Variable: "$.transcribeStatus.status"
                StringEquals: "COMPLETED"
                Next: processText
              - Variable: "$.transcribeStatus.count"
                NumericGreaterThan: 5
                Next: processText
            Default: waitForTranscribe 
          processText:
            Type: Pass 
            End: true
          handledError:
            Type: Pass 
            End: true 
          taskFailed:
            Type: Pass 
            End: true 
  validate: true 

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
